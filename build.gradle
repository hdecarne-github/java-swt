// Plugins
plugins {
	id "de.carne.java-tools" version "0.6.3" apply false
	id "org.sonarqube" version "2.6.2" apply false
	id "com.jfrog.artifactory" version "4.7.2" apply false
	id "com.jfrog.bintray" version "1.8.0" apply false
}

// Build helpers
def snapshotBuild = project.version.endsWith("-SNAPSHOT")

def resolveProperty(propertyName, envName) {
	def resolved = (project.findProperty(propertyName) ?: System.getenv(envName));

	if(resolved == null) {
		throw new GradleException("Missing property/environment variable: '${propertyName}'/'${envName}")
	}
	return resolved; 
}

// Projects
subprojects {

	apply plugin: "java-library"
	apply plugin: "jacoco"
	apply plugin: "de.carne.java-tools"
	apply plugin: "org.sonarqube"
	apply plugin: "maven-publish"
	apply plugin: "com.jfrog.artifactory"
	apply plugin: "com.jfrog.bintray"
	apply plugin: "eclipse"
	
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	
	repositories {
		mavenLocal()
		jcenter()
		maven { url "https://oss.jfrog.org/libs-releases/" }
		if(snapshotBuild) {
			maven { url "https://oss.jfrog.org/libs-snapshot/" }
		}
	}
	
	def sharedSrcDir = "../java-swt-gtk-linux-x86_64/shared-src"

	sourceSets {
		main {
			java {
				srcDir "${sharedSrcDir}/main/java"
			}
			resources {
				srcDir "${sharedSrcDir}/main/resources"
			}
		}
		test {
			java {
				srcDir "${sharedSrcDir}/test/java"
			}
			resources {
				srcDir "${sharedSrcDir}/test/resources"
			}
		}
	}
	
	javatools {
		generateI18N {
			enabled = true
			genDir = file("${sharedSrcDir}/main/java")
			bundles = fileTree("${sharedSrcDir}/main/resources") {
				include "**/*I18N.properties"
			}
		}
	}
	
	def platformSuffix = project.name.substring(rootProject.name.length())
	def swtPlatformSuffix = platformSuffix.replace('-', '.')

	dependencies {
		api("org.eclipse.platform:org.eclipse.swt${swtPlatformSuffix}:3.106.3") {
			exclude group: 'org.eclipse.platform', module: 'org.eclipse.swt.${osgi.platform}'
		}
		api("de.carne.common:java-default:8.4.0")
		testImplementation("de.carne.common:java-test-swt${platformSuffix}:2.1.0-SNAPSHOT")
		testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.2.0")
		testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.2.0")
	}
	
	jar {
		manifest {
			attributes "Automatic-Module-Name": automaticModuleName
		}
	}

	test {
		useJUnitPlatform()
		// SWT display can only be created once per VM
		forkEvery = 1
		testLogging {
			events "failed"
			exceptionFormat "full"
		}
	}

	jacoco {
		toolVersion = "0.8.1"
	}
		
	jacocoTestReport {
		reports {
			xml.enabled false
			html.enabled true
			html.destination file("${buildDir}/reports/jacoco")
			csv.enabled false
		}
	}
	
	task sourceJar(type: Jar) {
		from sourceSets.main.allJava
		classifier "sources"
	}
	
	task javadocJar(type: Jar) {
		from javadoc
		classifier = "javadoc"
	}
	
	publishing {
		publications {
			Bintray(MavenPublication) {
				from components.java
				artifact sourceJar
				artifact javadocJar
				pom.withXml {
					asNode().children().last() + {
						resolveStrategy = Closure.DELEGATE_FIRST
						name project.name
						description projectDescription
						url projectUrl
						licenses {
							license {
								name projectLicense
								url projectLicenseUrl
								distribution "repo"
							}
						}
						developers {
							developer {
								id project.resolveProperty("developerId", "DEVELOPER_ID")
								name project.resolveProperty("developerName", "DEVELOPER_NAME")
								email project.resolveProperty("developerEmail", "DEVELOPER_EMAIL")
							}
						}
						scm {
							url projectScmUrl
						}
					}
				}
			}
		}
	}

	artifactory {
		contextUrl = "https://oss.jfrog.org/artifactory"
		publish {
			repository {
				repoKey = (snapshotBuild ? "oss-snapshot-local" : "oss-release-local")
				username = project.resolveProperty("artifactory_user", "ARTIFACTORY_USER")
				password = project.resolveProperty("artifactory_password", "ARTIFACTORY_PASSWORD")
				maven = true
			}
			defaults {
				publications("Bintray")
			}
		}
		resolve {
			repoKey = (snapshotBuild ? "libs-snapshot" : "libs-release")
			username = project.resolveProperty("artifactory_user", "ARTIFACTORY_USER")
			password = project.resolveProperty("artifactory_password", "ARTIFACTORY_PASSWORD")
			maven = true
		}
		clientConfig.setIncludeEnvVars(false)
	}
	
	bintray {
		user = project.resolveProperty("bintrayUser", "BINTRAY_USER")
		key = project.resolveProperty("bintrayKey", "BINTRAY_KEY")
		publications = [ "Bintray" ]
		pkg {
			repo = "maven"
			name = project.name
			licenses = [ projectLicenseId ]
			vcsUrl = projectScmUrl
			version {
				gpg {
					sign = true
					passphrase = project.resolveProperty("bintrayGpgPassphrase", "BINTRAY_GPG_PASSPHRASE")
				}
			}
		}
	}

	eclipse {
		classpath {
			downloadSources = true
			downloadJavadoc = true
		}
	}
}
